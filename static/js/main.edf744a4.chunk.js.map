{"version":3,"sources":["Components/Infobox/infoBox.jsx","utils/utils.js","Components/Map/map.jsx","Components/Table/table.jsx","Components/Linegraph/linegraph.jsx","Components/Loader/loader.jsx","App.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","isBlack","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","printStat","stat","numeral","format","printStatTotal","showMapData","data","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","url","attribution","Table","defaults","plugins","legend","display","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","a","fetch","then","res","json","fetchData","length","datasets","backgroundColor","borderColor","options","maintainAspectRatio","responsive","interaction","mode","intersect","elements","point","scales","type","time","tooltipFormat","grid","Loader","size","particlesOptions","particles","number","value","density","enable","value_area","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","loading","setLoading","setTimeout","name","iso3","console","log","getCountriesData","onCountryChange","e","countryCode","target","response","params","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.edf744a4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./infoBox.css\";\r\n\r\nconst InfoBox = ({ title, cases, total, active,isRed, isBlack, ...props }) => {\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n      } ${isBlack && \"infoBox--black\"}`}\r\n    >\r\n      <CardContent>\r\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n          {title}\r\n        </Typography>\r\n        <h2 className=\"infoBox__cases\">{cases}</h2>\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default InfoBox;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\nimport \"./utils.css\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#ff1a1a\",\r\n    rgb: \"#ff0000\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 500,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 500,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const printStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const printStatTotal = (stat) =>\r\n  stat ? `${numeral(stat).format(\"0.0a\")}` : \"0\";\r\n\r\nexport const showMapData = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      color={casesTypeColors[casesType].rgb}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"popup__container\">\r\n          <div\r\n            className=\"popup__flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          />\r\n          <div className=\"popup__country\">{country.country}</div>\r\n          <div className=\"popup__cases\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"popup__recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"popup__deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from \"react\";\r\nimport { MapContainer as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./map.css\"\r\nimport { showMapData } from \"../../utils/utils\"\r\n\r\nconst Map = ({countries, casesType, center, zoom}) => {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {\r\n          showMapData(countries, casesType)\r\n        }\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\"\r\nimport \"./table.css\"\r\n\r\nconst Table = ({ countries }) => {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map(({ country, cases }) => (\r\n        <tr>\r\n          <td>{country}</td>\r\n          <td>\r\n            <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n          </td>\r\n        </tr>\r\n      ))} \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line, defaults } from \"react-chartjs-2\";\r\n\r\n// defaults.plugins.tooltip.enabled = true\r\ndefaults.plugins.legend.display = false;\r\n\r\nconst buildChartData = (data, casesType = \"cases\") => {\r\n  const chartData = [];\r\n  let lastDataPoint;\r\n\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      const newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\n// https://disease.sh/v3/covid-19/historical/all?lastdays=120\r\nconst LineGraph = ({ casesType = \"cases\" }) => {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n        });\r\n    };\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"#ffb3b3\",\r\n                borderColor: \"#e60000\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={{\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n            interaction: {\r\n              mode: \"index\",\r\n              intersect: false,\r\n            },\r\n            elements: {\r\n              point: {\r\n                radius: 0,\r\n              },\r\n            },\r\n            scales: {\r\n              x: [\r\n                {\r\n                  type: \"time\",\r\n                  time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                  },\r\n                  grid: {\r\n                    color: \"#d1e0e0\",\r\n                  },\r\n                },\r\n              ],\r\n            },\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LineGraph;\r\n","import React from 'react'\r\nimport MoonLoader from \"react-spinners/MoonLoader\";\r\nimport \"./loader.css\"\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className=\"loader\">\r\n            <MoonLoader color=\"#ff0000\" size={100} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader\r\n","import React, { useState, useEffect } from \"react\";\nimport {\n  FormControl,\n  MenuItem,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport Particles from \"react-particles-js\";\nimport InfoBox from \"./Components/Infobox/infoBox\";\nimport Map from \"./Components/Map/map\";\nimport Table from \"./Components/Table/table\";\nimport LineGraph from \"./Components/Linegraph/linegraph\";\nimport Loader from \"./Components/Loader/loader\";\nimport { printStat, printStatTotal } from \"./utils/utils\";\nimport \"./App.css\";\nimport \"leaflet/dist/leaflet.css\";\n\nconst particlesOptions = {\n  //customize this to your liking\n  particles: {\n    number: {\n      value: 100,\n      density: {\n        enable: true,\n        value_area: 800\n      }\n    }\n  }\n}\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [loading, setLoading] = useState(false);\n\n  // https://disease.sh/v3/covid-19/countries\n\n  useEffect(() => {\n    setLoading(true);\n    setTimeout(() => {\n      setLoading(false);\n    }, 800);\n  }, []);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((res) => res.json())\n      .then((data) => setCountryInfo(data));\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((res) => res.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso3,\n          }));\n          setTableData(data);\n          setMapCountries(data);\n          console.log(mapCountries);\n          setCountries(countries);\n        });\n    };\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n\n    // https://disease.sh/v3/covid-19/all\n    // https://disease.sh/v3/covid-19/countries/[COUNTRY_CODE]\n  };\n\n  return (\n    <>\n      {loading ? (\n        <Loader />\n      ) : (\n        <div className=\"app\">\n          <Particles className=\"particles\" params={particlesOptions} />\n          <div className=\"app__left\">\n            <div className=\"app__header\">\n              <h1>COVID-19 TRACKER</h1>\n              <FormControl>\n                <Select\n                  className=\"app__dropdown\"\n                  variant=\"outlined\"\n                  value={country}\n                  onChange={onCountryChange}\n                >\n                  <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n                  {countries.map((country) => (\n                    <MenuItem key={country.name} value={country.value}>\n                      {country.name}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </div>\n            <div className=\"app__stats\">\n              <InfoBox\n                active={casesType === \"cases\"}\n                isRed\n                title=\"Cases\"\n                cases={printStat(countryInfo.todayCases)}\n                total={printStatTotal(countryInfo.cases)}\n                onClick={(e) => setCasesType(\"cases\")}\n              />\n              <InfoBox\n                active={casesType === \"recovered\"}\n                title=\"Recovered\"\n                cases={printStat(countryInfo.todayRecovered)}\n                total={printStatTotal(countryInfo.recovered)}\n                onClick={(e) => setCasesType(\"recovered\")}\n              />\n              <InfoBox\n                active={casesType === \"deaths\"}\n                isBlack\n                title=\"Deaths\"\n                cases={printStat(countryInfo.todayDeaths)}\n                total={printStatTotal(countryInfo.deaths)}\n                onClick={(e) => setCasesType(\"deaths\")}\n              />\n            </div>\n            <Map\n              casesType={casesType}\n              countries={mapCountries}\n              center={mapCenter}\n              zoom={mapZoom}\n            />\n          </div>\n          <Card className=\"app__right\">\n            <CardContent>\n              <h3>Live Cases By Country</h3>\n              <Table countries={tableData} />\n              <h3>Worldwide new {casesType} </h3>\n              <LineGraph casesType={casesType} />\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />\n,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}